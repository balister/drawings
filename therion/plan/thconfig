encoding  utf-8
#select 107.all
source gemse.th
#!PROCESS

layout gemse
  map-header 100 0 se
#  map-image 0 100 nw ../EXPO/grey_map3.pdf
#   map-image 0 100 nw ../grey_map3.pdf 
#  map-image 35 0 sw ../EXPO/plateau_map.pdf 
 # symbol-set UIS 
#debug on
  legend on
  colour map-fg [altitude]
#  colour map-fg [scrap]
#  grid bottom
 # grid-coords border

code tex-map
 \cavename={1623/107 Gemseh√∂hle}
 \cavelength{3766\thinspace{}m}
 \cavedepth{254\thinspace{}m}
 \framethickness=0.5mm
 
 # colour map-bg [70 90 70]
  
  code metapost
  map-comment "Explored and surveyed by CUCC 1978, 2012-2015<br>BCRA Grade 5C"
#  fonts_setup(7,8,10,14,20); #original
    fonts_setup(7,10,14,20,26); 
  
     let p_gradient = p_entrance_UIS;
     let p_clay = p_flowstone_UIS;
     let l_wall_debris = l_wall_debris_AUT;
      let l_wall_blocks = l_wall_blocks_AUT;
 
  beginpattern(pattern_water);
      draw origin--10up withpen pensquare scaled (0.03u); % line thickness
      patternxstep(.5u);                                 % spacing
      patterntransform(identity rotated 45);
  endpattern;
  
    def a_water (expr Path) =
    T:=identity;
    thclean Path;
    pickup PenD;
    thfill Path withpattern pattern_water;  
  enddef;
  
      beginpattern(pattern_mud);
        pickup PenC;
        p:=(.0u,.0u) -- (0.25u,.0u);
        for i=0.0u step 0.6u until 5.4u:
            for j=0.0u step 0.6u until 5.4u:
                draw p shifted ((i,j) randomized 0.2u);
                draw p shifted ((i+.3u,j+.3u) randomized 0.2u);
            endfor;
        endfor;
        patternstep(5.4u,5.4u);
    endpattern;

    def a_clay (expr p) =
        T:=identity;
        thfill p withpattern pattern_mud;
    enddef;
       
       beginpattern(pattern_sand);
        pickup PenC;
        p:= origin -- (0.01u,0.01u);
        for i=0.0u step 0.5u until 2.5u:  %AUT is step 0.2u 
          for j=0.0u step 0.5u until 2.5u:  %AUT is step 0.2u 
            draw p rotated uniformdeviate(360) 
             shifted ((i,j) randomized 0.4u);  %%AUT is 0.09u
          endfor;
        endfor;
        if BaseScale<=2.5:
            my_step:=2.6u;  %mystep controls tessilation pattern, must synchronise with i, j above, was 2.4u
        else:
            my_step:=2.8u;  %was 2.6u
        fi;
        patternstep(my_step,my_step);       
    endpattern;

    def a_sand (expr Path) =
        T:=identity;
        %thclean Path; %makes passage colour more intense under area, not good for sand
        thfill Path withpattern pattern_sand ;
    enddef;
 # Adapted from Thomas Holder's
 def s_scalebar (expr l, units, txt) =
  begingroup
    interim warningcheck:=0;
    tmpl:=l / Scale * cm * units / 2;
    tmpx:=l / Scale * cm * units / 5;
    tmph:=5bp; % bar height
  endgroup;
  pickup PenC;
  draw (-tmpl,0)--(tmpl,0);
  p:=(0,0)--(0,-tmph);
  for i:=-2.5 step 1 until 2.5:
    draw p shifted (i * tmpx,0);
  endfor;
  begingroup
    interim labeloffset:=3.5bp;
    for i:=0 step (l/5) until (l-1):
      tmpx:=tmpl * (i * 2 / l - 1);
      label.bot(thTEX(decimal (i)),(tmpx,-tmph));
    endfor;
    label.bot(thTEX(decimal (l) & "\thinspace" & txt),(tmpl,-tmph));
    label.top(thTEX("Original Scale 1:" & decimal round(Scale*100)),(0,0));
  endgroup;
enddef;
 
  endcode
 # def l_survey_cave (expr p) =
 #   draw p withpen PenD withcolor (0.5,0.3,0.3);
 # enddef;
  
  scale 1 500
  base-scale 1 200
#  statistics explo on
endlayout

export map -layout gemse -projection plan -output 107-plan.pdf
#export map -projection plan -output 107-plan.pdf \
 # -layout-map-header 0 0 s
